# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z9ySyCt04bP06nV3pQMeDEX7HVmK-smA
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import classification_report, mean_absolute_error , mean_squared_error, r2_score, accuracy_score, confusion_matrix
from sklearn.preprocessing import StandardScaler
import joblib
import kagglehub
import os

path= kagglehub.dataset_download("ajinilpatel/energy-consumption-prediction")
print("Path to dataset files:", path)
#kaggle repo: https://www.kaggle.com/datasets/ajinilpatel/energy-consumption-prediction/data

#define path to file
os.listdir(path)
file_path=os.path.join(path, "Energy_consumption_dataset.csv")
print(file_path)

#load dataset as dataframe
df_main=pd.read_csv(file_path)
df_main.info()
df_main.head()

#create a working copy to manipulate while maintaining original datafram
df=df_main.copy()
#drop columns with more than half of their entries as Null
df=df.loc[:, df.isna().mean() < 0.5]
#drop records with null values in the Energy Consumption column
df=df.dropna(subset=["EnergyConsumption"])
#cast the Energy Consumption column as a float type for numerical analysis
y=df["EnergyConsumption"].astype(float)
#X= df.drop(columns=[col for col in ["EnergyConsumption", "EnergyBin"]if col in df.columns])
#drop the Energy Consumption column from the base frame to train AI with
X=df.drop(columns=["EnergyConsumption"])
#make words binary
X=pd.get_dummies(X, drop_first=True)
print(f"X shape: {X.shape}")
feature_name=X.columns.tolist()

#function to domicile regression
def report_regression(y_true, y_pred, prefix=''):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = mse ** 0.5
    r2 = r2_score(y_true, y_pred)
    print(f"{prefix} MAE: {mae:.4f}")
    print(f"{prefix} MSE: {mse:.4f}")
    print(f"{prefix} RMSE: {rmse:.4f}")
    print(f"{prefix} R^2: {r2:.4f}")
    return {'mae': mae, 'mse': mse, 'rmse': rmse, 'r2': r2}

#Split data
X_train, X_test, X_hold, y_train, y_test, y_hold = two_stage_split(X.values, y_reg.values, holdout_frac=0.2, test_frac_within=0.2, random_state=42)

scaler= StandardScaler()
X_train_sc= scaler.fit_transform(X_train)
X_test_sc= scaler.transform(X_test)
X_hold_sc= scaler.transform(X_hold)

#linear regression
rgr= LinearRegression()
rgr.fit(X_train_sc, y_train)
y_pred= rgr.predict(X_test_sc)

report_regression(y_test, y_pred_test, prefix='Test')
